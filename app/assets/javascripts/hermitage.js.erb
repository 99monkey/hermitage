/*
 * decaffeinate suggestions:
 * DS101: Remove unnecessary use of Array.from
 * DS102: Remove unnecessary code created because of implicit returns
 * DS207: Consider shorter variations of null checks
 * DS208: Avoid top-level this
 * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md
 */
const root = typeof exports !== 'undefined' && exports !== null ? exports : this;

//
// Data
//

// Hermitage options
root.hermitage = {
  looped: true,
  preloadNeighbours: true,
  slideshowEffect: 'slide', // or 'fade'

  // Image viewer properties
  default: {
    styles: {
      zIndex: 1030,
      position: 'fixed',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%'
    }
  },

  // Darkening properties
  darkening: {
    default: {
      attributes: { id: 'overlay' },
      styles: {
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        backgroundColor: '#000'
      }
    },
    styles: {},
    opacity: 0.85
  }, // 0 if you don't want darkening


  // Navigation buttons' properties
  navigationButtons: {
    default: {
      attributes: {},
      styles: {
        position: 'absolute',
        width: '50px',
        height: '100%',
        top: 0,
        cursor: 'pointer',
        color: '#FAFAFA',
        fontSize: '30px',
        fontFamily: 'Tahoma,Arial,Helvetica,sans-serif',
        textAlign: 'center',
        verticalAlign: 'middle'
      }
    },
        
    enabled: true,
    styles: {},

    next: {
      default: {
        attributes: { id: 'navigation-right' },
        styles: { right: 0 }
      },
      styles: {},
      text: '▶'
    },

    previous: {
      default: {
        attributes: { id: 'navigation-left' },
        styles: { left: 0 }
      },
      styles: {},
      text: '◀'
    }
  },

  // Close button properties
  closeButton: {
    default: {
      attributes: { id: 'close-button' },
      styles: {
        position: 'absolute',
        top: 0,
        right: 0,
        color: '#FFF',
        fontSize: '30px',
        fontFamily: 'Tahoma,Arial,Helvetica,sans-serif',
        whiteSpace: 'nowrap',
        cursor: 'pointer',
        padding: '0px 20px'
      }
    },
    styles: {},        
    enabled: true,
    text: '×'
  },


  // Current image properties
  image: {
    default: {
      attributes: { class: 'current' },
      styles: {
        cursor: 'pointer',
        maxWidth: 'none'
      }
    }, // Fix the conflict with Twitter Bootstrap
    styles: {}
  },
  
  // Bottom panel (for text or anything else)
  bottomPanel: {
    default: {
      attributes: { class: 'bottom-panel' },
      styles: {
        position: 'absolute',
        bottom: 0,
        height: '70px'
      }
    },
    styles: {},

    text: {
      default: {
        attributes: { class: 'text' },
        styles: {
          width: '100%',
          height: '100%',
          textAlign: 'center',
          color: '#FAFAFA'
        }
      },
      styles: {}
    }
  },

  loaderTimer: undefined,
  loader: {
    default: {
      attributes: { class: 'loader' },
      styles: {}
    },
    styles: {},
    image: '<%= asset_path 'hermitage-loader.gif' %>',
    timeout: 100
  },

  // Minimum size of scaled image, px
  minimumSize: {
    width: 100,
    height: 100
  },

  // Duration of all animations, ms
  animationDuration: 400,

  // Array of images of current gallery
  images: [],

  // Timeout before adjustig elements after window resize
  resizeTimeout: 100,

  // Timer for resizing
  resizeTimer: undefined,

  // Initializes the gallery on this page
  init() {
    // Create Hermitage layer if it doesn't exist
    if ($('#hermitage').length === 0) {
      $('<div>')
        .attr('id', 'hermitage')
        .css(hermitage.default.styles)
        .hide()
        .appendTo($('body'));
    }

    // Clear old images and texts array
    hermitage.images.length = 0;

    // Create new images and texts array
    $.each($('a[rel="hermitage"]'), function() {
      return addImage($(this).attr('href'), $(this).attr('title'));
    });

    // Set on click handlers to all elements that
    // have 'hermitage' rel attribute
    $('a[rel="hermitage"]').click(function(event) {
      openGallery(this);
      return event.preventDefault();
    });

    // Set event on window resize
    $(window).resize(function() {
      if (hermitage.resizeTimer) { clearTimeout(hermitage.resizeTimer); }
      return hermitage.resizeTimer = setTimeout( 
        () => adjustImage(true),
        hermitage.resizeTimeout);
    });

    // Initialize Key Bindings
    return createKeyBindings();
  }
};

//
// Working with images array
//
var addImage = function(source, text) {
  const image = {
    source,
    text,
    loaded: false
  };
  return hermitage.images.push(image);
};

const indexOfImage = function(image) {
  const source = $(image).prop('tagName') === 'IMG' ? $(image).attr('src') : $(image).attr('href');
  const imageObject = (Array.from(hermitage.images).filter((img) => img.source === source))[0];
  return hermitage.images.indexOf(imageObject);
};

const imageAt = index => hermitage.images[index];
const sourceFor = index => imageAt(index).source;
const textFor = index => imageAt(index).text;

//
// Helpers
//
$.fn.applyStyles = function(params, withAnimation, complete) {
  if (complete == null) { complete = undefined; }
  if (withAnimation) {
    return this.animate(params, { duration: hermitage.animationDuration, queue: false, complete });
  } else {
    return this.css(params);
  }
};

// Place element at the center of screen
$.fn.center = function(withAnimation, width, height, offsetX, offsetY) {
  if (withAnimation == null) { withAnimation = false; }
  if (width == null) { width = 0; }
  if (height == null) { height = 0; }
  if (offsetX == null) { offsetX = 0; }
  if (offsetY == null) { offsetY = 0; }
  this.css('position', 'absolute');

  if (width === 0) { width = $(this).outerWidth(); }
  if (height === 0) { height = $(this).outerHeight(); }

  const params = {
    top: `${Math.max(0, (($('#overlay').outerHeight() - height) / 2) + offsetY)}px`,
    left: `${Math.max(0, (($('#overlay').outerWidth() - width) / 2) + offsetX)}px`
  };

  return this.applyStyles(params, withAnimation);
};

$.fn.setSize = function(width, height, withAnimation) {
  if (withAnimation == null) { withAnimation = false; }
  const params = { width, height};
  return this.applyStyles(params, withAnimation);
};

$.fn.maximizeLineHeight = function(withAnimation) {
  if (withAnimation == null) { withAnimation = false; }
  const params = { lineHeight: `${this.outerHeight()}px` };
  return this.applyStyles(params, withAnimation);
};

$.fn.showFromRight = function(width, height, offsetX, offsetY) {
  if (width == null) { width = 0; }
  if (height == null) { height = 0; }
  if (offsetX == null) { offsetX = 0; }
  if (offsetY == null) { offsetY = 0; }
  this.css({left: `${$('#overlay').width()}px`});
  this.show();
  return this.center(true, width, height, offsetX, offsetY);
};

$.fn.showFromLeft = function(width, height, offsetX, offsetY) {
  if (width == null) { width = 0; }
  if (height == null) { height = 0; }
  if (offsetX == null) { offsetX = 0; }
  if (offsetY == null) { offsetY = 0; }
  this.css({left: `${- $(this).outerWidth()}px`});
  this.show();
  return this.center(true, width, height, offsetX, offsetY);
};

$.fn.hideToRight = function(complete) {
  if (complete == null) { complete = undefined; }
  const params = { left: `${$('#overlay').width()}px` };
  return this.applyStyles(params, true, complete);
};

$.fn.hideToLeft = function(complete) {
  if (complete == null) { complete = undefined; }
  const params = { left: `${- $(this).outerWidth()}px` };
  return this.applyStyles(params, true, complete);
};

//
// Hermitage logic
//

// Creates base element with attributes and styles from params
const createElement = (tag, params) => tag
  .attr(params.default.attributes)
  .css(params.default.styles)
  .css(params.styles);

// Creates darkening overlay, shows it and sets its click handler
const createDarkening = () => createElement($('<div>'), hermitage.darkening)
  .css('opacity', hermitage.darkening.opacity)
  .css('filter', `alpha(opacity='${hermitage.darkening.opacity * 100}')`)
  .appendTo($('#hermitage'))
  .hide()
  .fadeIn()
  .click(closeGallery);

// Creates base navigation button and returns it
const createNavigationButton = () => createElement($('<div>'), hermitage.navigationButtons)
  .appendTo($('#hermitage'))
  .hide()
  .maximizeLineHeight();

// Creates right navigation button and returns it
const createRightNavigationButton = () => createElement(createNavigationButton(), hermitage.navigationButtons.next)
  .text(hermitage.navigationButtons.next.text)
  .click(showNextImage);

// Create left navigation button and returns it
const createLeftNavigationButton = () => createElement(createNavigationButton(), hermitage.navigationButtons.previous)
  .text(hermitage.navigationButtons.previous.text)
  .click(showPreviousImage);

// Creates close button
const createCloseButton = () => createElement($('<div>'), hermitage.closeButton)
  .appendTo($('#hermitage'))
  .hide()
  .text(hermitage.closeButton.text)
  .click(closeGallery);

const createBotomPanel = function() {
  const bottomPanel = createElement($('<div>'), hermitage.bottomPanel)
    .appendTo($('#hermitage'))
    .hide();

  return createElement($('<div>'), hermitage.bottomPanel.text)
    .appendTo(bottomPanel);
};

const createLoader = () => loadImage(hermitage.loader.image, () => createElement($('<img>'), hermitage.loader)
  .attr('src', hermitage.loader.image)
  .appendTo($('#hermitage'))
  .hide()
  .center());

const clearLoaderTimer = function() { if (hermitage.loaderTimer) { return clearTimeout(hermitage.loaderTimer); } };

const showLoader = function() {
  clearLoaderTimer();
  return hermitage.loaderTimer = setTimeout( 
    () => $('#hermitage .loader').show(),
    hermitage.loader.timeout);
};

const hideLoader = function() {
  clearLoaderTimer();
  return $('#hermitage .loader').hide();
};

var createKeyBindings = () => $(document).keyup(function(e) {
  switch (e.keyCode) {
    case 27: return closeGallery();
    case 37: return showPreviousImage();
    case 39: return showNextImage();
  }
});

// Shows original image of the chosen one
var openGallery = function(image) {
  $('#hermitage')
    .empty()
    .show();
  
  createDarkening();
  createRightNavigationButton();
  createLeftNavigationButton();
  createCloseButton();
  createBotomPanel();
  createLoader();

  return showImage(indexOfImage(image));
};
  
// Shows image with specified index from images array
var showImage = function(index, direction) {
  if (direction == null) { direction = undefined; }
  showLoader();

  const img = createElement($('<img />'), hermitage.image)
    .attr('src', sourceFor(index))
    .hide()
    .appendTo($('#hermitage'));
  
  img.click(function(event) {
    if (event.pageX >= ($(window).width() / 2)) {
      return showNextImage();
    } else {
      return showPreviousImage();
    }
  });

  adjustImage(false, img, direction);
  return preloadNeighboursFor(index);
};

// Shows next image
var showNextImage = function() {
  const current = $('img.current');
  if (current.length === 1) {
    const index = indexOfImage(current);
    if (!canShowNextAfter(index)) { return; }
    
    let direction = hermitage.slideshowEffect === 'slide' ? 'left' : undefined;
    hideCurrentImage(direction);

    direction = hermitage.slideshowEffect === 'slide' ? 'right' : undefined;
    return showImage(nextIndexAfter(index), direction);
  }
};

// Shows previous image
var showPreviousImage = function() {
  const current = $('img.current');
  if (current.length === 1) {
    const index = indexOfImage(current);
    if (!canShowPreviousBefore(index)) { return; }
    
    let direction = hermitage.slideshowEffect === 'slide' ? 'right' : undefined;
    hideCurrentImage(direction);

    direction = hermitage.slideshowEffect === 'slide' ? 'left' : undefined;
    return showImage(previousIndexBefore(index), direction);
  }
};

// Hides current image
// Arguments:
// * direction - how to hide the image. It can apply options:
//   * undefined - just fade out
//   * 'right' - move to the right bound of screen
//   * 'left' - move to the left bound of screen
var hideCurrentImage = function(direction) {
  if (direction == null) { direction = undefined; }
  const current = $('img.current');
  if (current.length === 1) {
    const complete = () => current.remove();

    if (direction === 'right') {
      return current.hideToRight(complete);
    } else if (direction === 'left') {
      return current.hideToLeft(complete);
    } else {
      return current.fadeOut(hermitage.animationDuration, complete);
    }
  }
};

// Starts fade out animation and clears Hermitage at the end of animation
var closeGallery = function() {
  $('#hermitage :not(#overlay)').fadeOut();
  return $('#overlay').fadeOut(hermitage.animationDuration, () => $('#hermitage').hide()
                 .empty());
};

// Moves image to correct position and sets correct size.
// Then it calls adjusting methods for navigation and close buttons.
// Attributes:
// * `withAnimation` - boolean value determines if adjusting should be animated
// * `image` - currently opened image. It is optional argument and can be evaluated by the method itself.
// * direction - how to show the image. It can apply options:
//   * undefined - just fade in
//   * 'right' - move from the right bound of screen
//   * 'left' - move from the left bound of screen
var adjustImage = function(withAnimation, image, direction) {
  if (withAnimation == null) { withAnimation = false; }
  if (image == null) { image = undefined; }
  if (direction == null) { direction = undefined; }
  if (image === undefined) {
    image = $('#hermitage img.current');
    if (image.length !== 1) { return; }
  }

  const index = indexOfImage(image);

  // Wait until source image is loaded
  return loadImage(sourceFor(index), function() {
    imageAt(index).loaded = true;

    // Offset for image position
    let offsetY = 0;

    let maxWidth = $(window).width() - $('#navigation-left').outerWidth() - $('#navigation-right').outerWidth();
    let maxHeight = $(window).height();

    const text = textFor(index);

    if (text) {
      offsetY = - $('#hermitage .bottom-panel').outerHeight() / 2;
      maxHeight -= $('#hermitage .bottom-panel').outerHeight();
    }

    $('#hermitage .bottom-panel .text').text(text || '');

    if ((maxWidth <= hermitage.minimumSize.width) || (maxHeight <= hermitage.minimumSize.height)) {
      if (maxWidth < maxHeight) {
        maxWidth = hermitage.minimumSize.width;
        maxHeight = maxWidth * (this.height / this.width);
      } else {
        maxHeight = hermitage.minimumSize.height;
        maxWidth = maxHeight * (this.width / this.height);
      }
    }

    let scale = 1.0;

    if ((this.width > maxWidth) || (this.height > maxHeight)) {
      scale = Math.min(maxWidth / this.width, maxHeight / this.height);
    }

    image
      .setSize(this.width * scale, this.height * scale, withAnimation)
      .center(withAnimation, this.width * scale, this.height * scale, 0, offsetY);
    
    if (direction === 'right') {
      image.showFromRight(this.width * scale, this.height * scale, 0, offsetY);
    } else if (direction === 'left') {
      image.showFromLeft(this.width * scale, this.height * scale, 0, offsetY);
    } else {
      image.fadeIn(hermitage.animationDuration);
    }

    hideLoader();

    adjustNavigationButtons(withAnimation, image);
    adjustCloseButton(withAnimation, image);
    adjustBottomPanel(withAnimation);
    return $('#hermitage .loader').center();
  });
};

// Moves navigation buttons to proper positions
var adjustNavigationButtons = function(withAnimation, current) {
  if (!hermitage.navigationButtons.enabled) { return; }

  const previous = $('#hermitage #navigation-left');
  const next = $('#hermitage #navigation-right');

  // Set correct styles
  previous.maximizeLineHeight(withAnimation);
  next.maximizeLineHeight(withAnimation);
  
  // Show or hide buttons
  const currentIndex = indexOfImage(current);
  const duration = hermitage.animationDuration;
  
  if (canShowPreviousBefore(currentIndex)) {
    previous.fadeIn(duration);
  } else {
    previous.fadeOut(duration);
  }

  if (canShowNextAfter(currentIndex)) {
    return next.fadeIn(duration);
  } else {
    return next.fadeOut(duration);
  }
};

// Moves close button to proper position
var adjustCloseButton = function(withAnimation, current) {
  if (!hermitage.closeButton.enabled) { return; }
  const button = $('#hermitage #close-button');
  if (button.css('display') === 'none') {
    return button.fadeIn(hermitage.animationDuration);
  }
};

var adjustBottomPanel = function(withAnimation) {
  const panel = $('#hermitage .bottom-panel');
  if (panel.text() === '') {
    return panel.fadeOut(hermitage.animationDuration);
  } else {
    const params = {
      width: `${$(window).width() - $('#navigation-left').outerWidth() - $('#navigation-right').outerWidth()}px`,
      left: `${$('#navigation-left').position().left + $('#navigation-left').outerWidth()}px`
    };

    if (withAnimation) {
      panel.animate(params, { duration: hermitage.animationDuration, queue: false });
    } else {
      panel.css(params);
    }

    return panel.fadeIn(hermitage.animationDuration);
  }
};

var canShowNextAfter = function(index) {
  if (hermitage.images.length < 2) { return false; }

  if (index < (hermitage.images.length - 1)) {
    return true;
  } else {
    return hermitage.looped;
  }
};

var canShowPreviousBefore = function(index) {
  if (hermitage.images.length < 2) { return false; }

  if (index > 0) {
    return true;
  } else {
    return hermitage.looped;
  }
};

var preloadNeighboursFor = function(index) {
  if (!hermitage.preloadNeighbours) { return; }

  const nextIndex = nextIndexAfter(index);
  const previousIndex = previousIndexBefore(index);

  if (canShowNextAfter(index) && !imageAt(nextIndex).loaded) {
    loadImage(sourceFor(nextIndex), () => imageAt(nextIndex).loaded = true);
  }

  if (canShowPreviousBefore(index) && !imageAt(previousIndex).loaded) {
    return loadImage(sourceFor(previousIndex), () => imageAt(previousIndex).loaded = true);
  }
};

var loadImage = (source, complete) => $('<img />').attr('src', source).load(complete);

var nextIndexAfter = function(index) {
  if (index < (hermitage.images.length - 1)) {
    return index + 1;
  } else {
    return 0;
  }
};

var previousIndexBefore = function(index) {
  if (index > 0) {
    return index - 1;
  } else {
    return hermitage.images.length - 1;
  }
};


// Initialize gallery on page load
$(document).ready(hermitage.init);
$(document).on('page:change', hermitage.init);
